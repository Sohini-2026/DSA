package graph

func IsCycleInUndirectedGraph(graph map[int][]int) bool {
	visited := make(map[int]bool)

	for node := range graph {
		if !visited[node] {
			if dfs(graph, node, visited, -1) {
				return true // Cycle found
			}
		}
	}

	return false // No cycle found
}

func dfs(graph map[int][]int, node int, visited map[int]bool, parent int) bool {
	visited[node] = true

	for _, neighbor := range graph[node] {
		if !visited[neighbor] {
			if dfs(graph, neighbor, visited, node) {
				return true
			}
		} else if neighbor != parent {
			return true // Found a back edge
		}
	}

	return false
}
